{
  "address": "0x42b404a21335449a524d701E51943d3e226Daa2A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2SequencerUptimeFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FeedNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GracePeriodNotOver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SequencerDown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StalePrice",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoteToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "baseUsdFeed",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoteUsdFeed",
              "type": "address"
            }
          ],
          "internalType": "struct ChainlinkQuoter.QuoteRequest",
          "name": "req",
          "type": "tuple"
        }
      ],
      "name": "getQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2SequencerUptimeFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "secondaryOracleOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "secondaryOracle",
          "type": "address"
        }
      ],
      "name": "setSecondaryOracleOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setStalenessThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feed",
          "type": "address"
        }
      ],
      "name": "stalenessThresholdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8aa09e20cfe140401ffb58c28543fed4403908d94167874c1d76b8139150a5e",
  "receipt": {
    "to": null,
    "from": "0x12D1A136250131E37A607B0b78F6F109BF6a9fa3",
    "contractAddress": "0x18404De1887654A246e855892B71dFD11e927342",
    "transactionIndex": 1,
    "gasUsed": "5895186",
    "logsBloom": "0x
    "blockHash": "0x180bf7e5c7f7c15a419cf3c562c050114e0a2174300f5873b8e9aab463510847",
    "transactionHash": "0xf8aa09e20cfe140401ffb58c28543fed4403908d94167874c1d76b8139150a5e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 196052273,
        "transactionHash": "0xf8aa09e20cfe140401ffb58c28543fed4403908d94167874c1d76b8139150a5e",
        "address": "0x18404De1887654A246e855892B71dFD11e927342",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000012d1a136250131e37a607b0b78f6f109bf6a9fa3"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x180bf7e5c7f7c15a419cf3c562c050114e0a2174300f5873b8e9aab463510847"
      }
    ],
    "blockNumber": 196052273,
    "cumulativeGasUsed": "5895186",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xFdB631F5EE196F0ed6FAa767959853A9F217697D"],
  "numDeployments": 1,
  "solcInputHash": "d312090670b5b0d2c6ca885b582cee20",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2SequencerUptimeFeed_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FeedNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GracePeriodNotOver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SequencerDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StalePrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"baseUsdFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteUsdFeed\",\"type\":\"address\"}],\"internalType\":\"struct ChainlinkQuoter.QuoteRequest\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"getQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2SequencerUptimeFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"secondaryOracleOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondaryOracle\",\"type\":\"address\"}],\"name\":\"setSecondaryOracleOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setStalenessThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"stalenessThresholdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getQuote((address,address,uint256,address,address))\":{\"params\":{\"req\":\"The quote request\"},\"returns\":{\"quote\":\"The quote\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setSecondaryOracleOf(address,address)\":{\"details\":\"Sets the secondary oracle address for a given feed. ! This function is important to avoid single point of failure. If no fallback is set. vault will be locked forever as it's share calculation rely on the oracle. We can implement a secondary oracle which satisfies the same interface as the primary oracle. (e.g. Uniswap TWAP oracle) Only the contract owner can call this function.\",\"params\":{\"feed\":\"The address of the feed.\",\"secondaryOracle\":\"The address of the secondary oracle.\"}},\"setStalenessThreshold(address,uint256)\":{\"details\":\"Sets the staleness threshold for a specific feed. It should be changeable in case the feed's heartbeat interval changes. Only the contract owner can call this function.\",\"params\":{\"feed\":\"The address of the feed.\",\"threshold\":\"The staleness threshold to be set.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"stalenessThresholdOf\":{\"details\":\"The staleness threshold for each feed. this should be set to each feed's heartbeat interval: https://docs.chain.link/data-feeds/price-feeds/addresses\"}},\"title\":\"ChainlinkQuoter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getQuote((address,address,uint256,address,address))\":{\"notice\":\"Returns the quote for a given token pair\"}},\"notice\":\"Provides quotes for token pairs using Chainlink price feeds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dopex-v2-lp-automator/contracts/ChainlinkQuoter.sol\":\"ChainlinkQuoter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dopex-v2-lp-automator/contracts/ChainlinkQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.19;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC20Decimals} from \\\"./interfaces/IERC20Extended.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title ChainlinkQuoter\\n * @notice Provides quotes for token pairs using Chainlink price feeds\\n */\\ncontract ChainlinkQuoter is Ownable {\\n    /**\\n     * @notice Quote request\\n     * @param baseToken The base token to get a quote for\\n     * @param quoteToken The quote token\\n     * @param baseAmount The base amount with decimals\\n     * @param baseUsdFeed The base token USD price feed by Chainlink\\n     * @param quoteUsdFeed The quote token USD price feed by Chainlink\\n     */\\n    struct QuoteRequest {\\n        address baseToken;\\n        address quoteToken;\\n        uint256 baseAmount;\\n        address baseUsdFeed;\\n        address quoteUsdFeed;\\n    }\\n\\n    uint256 private constant GRACE_PERIOD_TIME = 3600;\\n\\n    address public immutable l2SequencerUptimeFeed;\\n\\n    /// @dev The staleness threshold for each feed.\\n    /// this should be set to each feed's heartbeat interval: https://docs.chain.link/data-feeds/price-feeds/addresses\\n    mapping(address feed => uint256) public stalenessThresholdOf;\\n    mapping(address feed => address) public secondaryOracleOf;\\n\\n    error SequencerDown();\\n    error GracePeriodNotOver();\\n    error StalePrice();\\n    error FeedNotAvailable();\\n\\n    constructor(address l2SequencerUptimeFeed_) {\\n        l2SequencerUptimeFeed = l2SequencerUptimeFeed_;\\n    }\\n\\n    /**\\n     * @notice Returns the quote for a given token pair\\n     * @param req The quote request\\n     * @return quote The quote\\n     */\\n    function getQuote(QuoteRequest memory req) public view returns (uint256 quote) {\\n        (, int256 answer, uint256 startedAt, , ) = AggregatorV3Interface(l2SequencerUptimeFeed).latestRoundData();\\n\\n        // answer == 1 means the sequencer is down (0 means it's up)\\n        if (answer == 1) revert SequencerDown();\\n\\n        // Make sure the grace period has passed after the sequencer is back up\\n        if (block.timestamp - startedAt <= GRACE_PERIOD_TIME) revert GracePeriodNotOver();\\n\\n        uint8 baseTokenDecimals = IERC20Decimals(req.baseToken).decimals();\\n        uint8 quoteTokenDecimals = IERC20Decimals(req.quoteToken).decimals();\\n\\n        int256 basePriceUsd;\\n        uint256 lastUpdateBase;\\n\\n        int256 quotePriceUsd;\\n        uint256 lastUpdateQuote;\\n\\n        try AggregatorV3Interface(req.baseUsdFeed).latestRoundData() returns (\\n            uint80,\\n            int256 basePriceUsd_,\\n            uint256,\\n            uint256 lastUpdateBase_,\\n            uint80\\n        ) {\\n            basePriceUsd = basePriceUsd_;\\n            lastUpdateBase = lastUpdateBase_;\\n        } catch {\\n            address secondaryOracle = secondaryOracleOf[req.baseUsdFeed];\\n            if (secondaryOracle == address(0)) revert FeedNotAvailable();\\n\\n            try AggregatorV3Interface(secondaryOracle).latestRoundData() returns (\\n                uint80,\\n                int256 basePriceUsd_,\\n                uint256,\\n                uint256 lastUpdateBase_,\\n                uint80\\n            ) {\\n                basePriceUsd = basePriceUsd_;\\n                lastUpdateBase = lastUpdateBase_;\\n            } catch {\\n                revert FeedNotAvailable();\\n            }\\n        }\\n\\n        try AggregatorV3Interface(req.quoteUsdFeed).latestRoundData() returns (\\n            uint80,\\n            int256 quotePriceUsd_,\\n            uint256,\\n            uint256 lastUpdateQuote_,\\n            uint80\\n        ) {\\n            quotePriceUsd = quotePriceUsd_;\\n            lastUpdateQuote = lastUpdateQuote_;\\n        } catch {\\n            address secondaryOracle = secondaryOracleOf[req.quoteUsdFeed];\\n            if (secondaryOracle == address(0)) revert FeedNotAvailable();\\n\\n            try AggregatorV3Interface(secondaryOracle).latestRoundData() returns (\\n                uint80,\\n                int256 quotePriceUsd_,\\n                uint256,\\n                uint256 lastUpdateQuote_,\\n                uint80\\n            ) {\\n                quotePriceUsd = quotePriceUsd_;\\n                lastUpdateQuote = lastUpdateQuote_;\\n            } catch {\\n                revert FeedNotAvailable();\\n            }\\n        }\\n\\n        if (block.timestamp - lastUpdateBase > stalenessThresholdOf[req.baseUsdFeed]) revert StalePrice();\\n        if (block.timestamp - lastUpdateQuote > stalenessThresholdOf[req.quoteUsdFeed]) revert StalePrice();\\n\\n        // Now we can safely calculate the quote from latest data\\n        uint256 _numerator = uint256(basePriceUsd) * req.baseAmount * 10 ** quoteTokenDecimals;\\n        uint256 _denominator = uint256(quotePriceUsd) * 10 ** baseTokenDecimals;\\n\\n        return _numerator / _denominator;\\n    }\\n\\n    /**\\n     * @dev Sets the staleness threshold for a specific feed.\\n     * It should be changeable in case the feed's heartbeat interval changes.\\n     * Only the contract owner can call this function.\\n     * @param feed The address of the feed.\\n     * @param threshold The staleness threshold to be set.\\n     */\\n    function setStalenessThreshold(address feed, uint256 threshold) external onlyOwner {\\n        stalenessThresholdOf[feed] = threshold;\\n    }\\n\\n    /**\\n     * @dev Sets the secondary oracle address for a given feed.\\n     * ! This function is important to avoid single point of failure. If no fallback is set. vault will be locked forever as it's share calculation rely on the oracle.\\n     * We can implement a secondary oracle which satisfies the same interface as the primary oracle. (e.g. Uniswap TWAP oracle)\\n     * Only the contract owner can call this function.\\n     * @param feed The address of the feed.\\n     * @param secondaryOracle The address of the secondary oracle.\\n     */\\n    function setSecondaryOracleOf(address feed, address secondaryOracle) external onlyOwner {\\n        secondaryOracleOf[feed] = secondaryOracle;\\n    }\\n}\\n\",\"keccak256\":\"0xec8d90de48c202db60996df08f3333e3c250a081b171a61312f86b839cd8dba0\",\"license\":\"GPL-3.0\"},\"contracts/dopex-v2-lp-automator/contracts/interfaces/IERC20Extended.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.19;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IERC20Symbol {\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8d5a773c423f6b6a214977698a979db1e2db2b7b0e5f7ced3584b8d5f327946d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610c63380380610c6383398101604081905261002f91610099565b61003833610049565b6001600160a01b03166080526100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b608051610b786100eb60003960008181610165015261020f0152610b786000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610129578063ae86c8951461013a578063b524aa2a1461014d578063ba76a68014610160578063f2fde38b1461018757600080fd5b80632f099011146100985780634667868d146100de578063715018a61461010c5780638c43111514610116575b600080fd5b6100c16100a6366004610846565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fe6100ec366004610846565b60016020526000908152604090205481565b6040519081526020016100d5565b61011461019a565b005b610114610124366004610868565b6101ae565b6000546001600160a01b03166100c1565b610114610148366004610892565b6101d2565b6100fe61015b3660046108c5565b610208565b6100c17f000000000000000000000000000000000000000000000000000000000000000081565b610114610195366004610846565b610702565b6101a2610780565b6101ac60006107da565b565b6101b6610780565b6001600160a01b03909116600090815260016020526040902055565b6101da610780565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561026b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028f9190610974565b50509250925050816001036102b65760405162032b3d60e81b815260040160405180910390fd5b610e106102c382426109da565b116102e15760405163d15f73b560e01b815260040160405180910390fd5b600084600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034991906109f3565b9050600085602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b391906109f3565b905060008060008089606001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015610419575060408051601f3d908101601f1916820190925261041691810190610974565b60015b6104e15760608a01516001600160a01b03908116600090815260026020526040902054168061045b57604051631f29851160e31b815260040160405180910390fd5b806001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156104b5575060408051601f3d908101601f191682019092526104b291810190610974565b60015b6104d257604051631f29851160e31b815260040160405180910390fd5b509197509095505050506104eb565b5091965090945050505b89608001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015610549575060408051601f3d908101601f1916820190925261054691810190610974565b60015b6106115760808a01516001600160a01b03908116600090815260026020526040902054168061058b57604051631f29851160e31b815260040160405180910390fd5b806001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156105e5575060408051601f3d908101601f191682019092526105e291810190610974565b60015b61060257604051631f29851160e31b815260040160405180910390fd5b5091955090935050505061061b565b5091945090925050505b60608a01516001600160a01b031660009081526001602052604090205461064284426109da565b111561066157604051630cd5fa0760e11b815260040160405180910390fd5b60808a01516001600160a01b031660009081526001602052604090205461068882426109da565b11156106a757604051630cd5fa0760e11b815260040160405180910390fd5b60006106b486600a610afa565b60408c01516106c39087610b09565b6106cd9190610b09565b905060006106dc88600a610afa565b6106e69085610b09565b90506106f28183610b20565b9c9b505050505050505050505050565b61070a610780565b6001600160a01b0381166107745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61077d816107da565b50565b6000546001600160a01b031633146101ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461084157600080fd5b919050565b60006020828403121561085857600080fd5b6108618261082a565b9392505050565b6000806040838503121561087b57600080fd5b6108848361082a565b946020939093013593505050565b600080604083850312156108a557600080fd5b6108ae8361082a565b91506108bc6020840161082a565b90509250929050565b600060a082840312156108d757600080fd5b60405160a0810181811067ffffffffffffffff8211171561090857634e487b7160e01b600052604160045260246000fd5b6040526109148361082a565b81526109226020840161082a565b60208201526040830135604082015261093d6060840161082a565b606082015261094e6080840161082a565b60808201529392505050565b805169ffffffffffffffffffff8116811461084157600080fd5b600080600080600060a0868803121561098c57600080fd5b6109958661095a565b94506020860151935060408601519250606086015191506109b86080870161095a565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b818103818111156109ed576109ed6109c4565b92915050565b600060208284031215610a0557600080fd5b815160ff8116811461086157600080fd5b600181815b80851115610a51578160001904821115610a3757610a376109c4565b80851615610a4457918102915b93841c9390800290610a1b565b509250929050565b600082610a68575060016109ed565b81610a75575060006109ed565b8160018114610a8b5760028114610a9557610ab1565b60019150506109ed565b60ff841115610aa657610aa66109c4565b50506001821b6109ed565b5060208310610133831016604e8410600b8410161715610ad4575081810a6109ed565b610ade8383610a16565b8060001904821115610af257610af26109c4565b029392505050565b600061086160ff841683610a59565b80820281158282048414176109ed576109ed6109c4565b600082610b3d57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220794ac6fe5ffbc8332968d95dc773d8c6ecfa732feb75d8667e7d4622411d2f6e64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b14610129578063ae86c8951461013a578063b524aa2a1461014d578063ba76a68014610160578063f2fde38b1461018757600080fd5b80632f099011146100985780634667868d146100de578063715018a61461010c5780638c43111514610116575b600080fd5b6100c16100a6366004610846565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100fe6100ec366004610846565b60016020526000908152604090205481565b6040519081526020016100d5565b61011461019a565b005b610114610124366004610868565b6101ae565b6000546001600160a01b03166100c1565b610114610148366004610892565b6101d2565b6100fe61015b3660046108c5565b610208565b6100c17f000000000000000000000000000000000000000000000000000000000000000081565b610114610195366004610846565b610702565b6101a2610780565b6101ac60006107da565b565b6101b6610780565b6001600160a01b03909116600090815260016020526040902055565b6101da610780565b6001600160a01b03918216600090815260026020526040902080546001600160a01b03191691909216179055565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561026b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028f9190610974565b50509250925050816001036102b65760405162032b3d60e81b815260040160405180910390fd5b610e106102c382426109da565b116102e15760405163d15f73b560e01b815260040160405180910390fd5b600084600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034991906109f3565b9050600085602001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561038f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b391906109f3565b905060008060008089606001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015610419575060408051601f3d908101601f1916820190925261041691810190610974565b60015b6104e15760608a01516001600160a01b03908116600090815260026020526040902054168061045b57604051631f29851160e31b815260040160405180910390fd5b806001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156104b5575060408051601f3d908101601f191682019092526104b291810190610974565b60015b6104d257604051631f29851160e31b815260040160405180910390fd5b509197509095505050506104eb565b5091965090945050505b89608001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015610549575060408051601f3d908101601f1916820190925261054691810190610974565b60015b6106115760808a01516001600160a01b03908116600090815260026020526040902054168061058b57604051631f29851160e31b815260040160405180910390fd5b806001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156105e5575060408051601f3d908101601f191682019092526105e291810190610974565b60015b61060257604051631f29851160e31b815260040160405180910390fd5b5091955090935050505061061b565b5091945090925050505b60608a01516001600160a01b031660009081526001602052604090205461064284426109da565b111561066157604051630cd5fa0760e11b815260040160405180910390fd5b60808a01516001600160a01b031660009081526001602052604090205461068882426109da565b11156106a757604051630cd5fa0760e11b815260040160405180910390fd5b60006106b486600a610afa565b60408c01516106c39087610b09565b6106cd9190610b09565b905060006106dc88600a610afa565b6106e69085610b09565b90506106f28183610b20565b9c9b505050505050505050505050565b61070a610780565b6001600160a01b0381166107745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61077d816107da565b50565b6000546001600160a01b031633146101ac5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461084157600080fd5b919050565b60006020828403121561085857600080fd5b6108618261082a565b9392505050565b6000806040838503121561087b57600080fd5b6108848361082a565b946020939093013593505050565b600080604083850312156108a557600080fd5b6108ae8361082a565b91506108bc6020840161082a565b90509250929050565b600060a082840312156108d757600080fd5b60405160a0810181811067ffffffffffffffff8211171561090857634e487b7160e01b600052604160045260246000fd5b6040526109148361082a565b81526109226020840161082a565b60208201526040830135604082015261093d6060840161082a565b606082015261094e6080840161082a565b60808201529392505050565b805169ffffffffffffffffffff8116811461084157600080fd5b600080600080600060a0868803121561098c57600080fd5b6109958661095a565b94506020860151935060408601519250606086015191506109b86080870161095a565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b818103818111156109ed576109ed6109c4565b92915050565b600060208284031215610a0557600080fd5b815160ff8116811461086157600080fd5b600181815b80851115610a51578160001904821115610a3757610a376109c4565b80851615610a4457918102915b93841c9390800290610a1b565b509250929050565b600082610a68575060016109ed565b81610a75575060006109ed565b8160018114610a8b5760028114610a9557610ab1565b60019150506109ed565b60ff841115610aa657610aa66109c4565b50506001821b6109ed565b5060208310610133831016604e8410600b8410161715610ad4575081810a6109ed565b610ade8383610a16565b8060001904821115610af257610af26109c4565b029392505050565b600061086160ff841683610a59565b80820281158282048414176109ed576109ed6109c4565b600082610b3d57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220794ac6fe5ffbc8332968d95dc773d8c6ecfa732feb75d8667e7d4622411d2f6e64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getQuote((address,address,uint256,address,address))": {
        "params": {
          "req": "The quote request"
        },
        "returns": {
          "quote": "The quote"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setSecondaryOracleOf(address,address)": {
        "details": "Sets the secondary oracle address for a given feed. ! This function is important to avoid single point of failure. If no fallback is set. vault will be locked forever as it's share calculation rely on the oracle. We can implement a secondary oracle which satisfies the same interface as the primary oracle. (e.g. Uniswap TWAP oracle) Only the contract owner can call this function.",
        "params": {
          "feed": "The address of the feed.",
          "secondaryOracle": "The address of the secondary oracle."
        }
      },
      "setStalenessThreshold(address,uint256)": {
        "details": "Sets the staleness threshold for a specific feed. It should be changeable in case the feed's heartbeat interval changes. Only the contract owner can call this function.",
        "params": {
          "feed": "The address of the feed.",
          "threshold": "The staleness threshold to be set."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "stalenessThresholdOf": {
        "details": "The staleness threshold for each feed. this should be set to each feed's heartbeat interval: https://docs.chain.link/data-feeds/price-feeds/addresses"
      }
    },
    "title": "ChainlinkQuoter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getQuote((address,address,uint256,address,address))": {
        "notice": "Returns the quote for a given token pair"
      }
    },
    "notice": "Provides quotes for token pairs using Chainlink price feeds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1813,
        "contract": "contracts/dopex-v2-lp-automator/contracts/ChainlinkQuoter.sol:ChainlinkQuoter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7960,
        "contract": "contracts/dopex-v2-lp-automator/contracts/ChainlinkQuoter.sol:ChainlinkQuoter",
        "label": "stalenessThresholdOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7964,
        "contract": "contracts/dopex-v2-lp-automator/contracts/ChainlinkQuoter.sol:ChainlinkQuoter",
        "label": "secondaryOracleOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
