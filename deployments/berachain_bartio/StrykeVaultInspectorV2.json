{
  "address": "0xC9c2E288a4eB2733Bc1c0a71f1341cF77D3B5F0c",
  "abi": [
    {
      "inputs": [],
      "name": "T",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrangeStrykeLPAutomatorV2_1",
          "name": "automator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertSharesToPairAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "counterAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrangeStrykeLPAutomatorV2_1",
          "name": "automator",
          "type": "address"
        }
      ],
      "name": "freeAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrangeStrykeLPAutomatorV2_1",
          "name": "automator",
          "type": "address"
        }
      ],
      "name": "freePoolPositionInToken01",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sumAmount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumAmount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrangeStrykeLPAutomatorV2_1",
          "name": "automator",
          "type": "address"
        }
      ],
      "name": "getAutomatorPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balanceDepositAsset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceCounterAsset",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "int24",
              "name": "tick",
              "type": "int24"
            },
            {
              "internalType": "uint128",
              "name": "liquidity",
              "type": "uint128"
            }
          ],
          "internalType": "struct IOrangeStrykeLPAutomatorV2_1.RebalanceTick[]",
          "name": "rebalanceTicks",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrangeStrykeLPAutomatorV2_1",
          "name": "automator",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "getTickAllLiquidity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOrangeStrykeLPAutomatorV2_1",
          "name": "automator",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        }
      ],
      "name": "getTickFreeLiquidity",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "freeLiquidity",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0234b1a8fc041cd41cb63a459461621e88ad37048328691f29eef4ed23881b55",
  "receipt": {
    "to": null,
    "from": "0xb0c757bC94704246Ce0552b5Ccc1A547c0633914",
    "contractAddress": "0xC9c2E288a4eB2733Bc1c0a71f1341cF77D3B5F0c",
    "transactionIndex": 428,
    "gasUsed": "2381542",
    "logsBloom": "0x
    "blockHash": "0xd275c45da786b56c2ffb5a9389c998b34f2bbab8f9a68682a9cf8645e8a00d77",
    "transactionHash": "0x0234b1a8fc041cd41cb63a459461621e88ad37048328691f29eef4ed23881b55",
    "logs": [],
    "blockNumber": 5315588,
    "cumulativeGasUsed": "25923133",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ebc6d9c78415a33e45406163804fd34f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"T\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IOrangeStrykeLPAutomatorV2_1\",\"name\":\"automator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertSharesToPairAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"counterAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrangeStrykeLPAutomatorV2_1\",\"name\":\"automator\",\"type\":\"address\"}],\"name\":\"freeAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrangeStrykeLPAutomatorV2_1\",\"name\":\"automator\",\"type\":\"address\"}],\"name\":\"freePoolPositionInToken01\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sumAmount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumAmount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrangeStrykeLPAutomatorV2_1\",\"name\":\"automator\",\"type\":\"address\"}],\"name\":\"getAutomatorPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceDepositAsset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceCounterAsset\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"internalType\":\"struct IOrangeStrykeLPAutomatorV2_1.RebalanceTick[]\",\"name\":\"rebalanceTicks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrangeStrykeLPAutomatorV2_1\",\"name\":\"automator\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"getTickAllLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOrangeStrykeLPAutomatorV2_1\",\"name\":\"automator\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"getTickFreeLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"freeLiquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"freeAssets(address)\":{\"details\":\"Calculates the total free assets in Dopex pools and returns the sum. Free assets are the assets that can be redeemed from the pools. This function iterates through the active ticks in the pool and calculates the liquidity that can be redeemed for each tick. It then converts the liquidity to token amounts using the current sqrt ratio and tick values. The sum of token amounts is calculated and merged with the total assets in the automator. Finally, the quote value is obtained using the current tick and the base value, and returned as the result.\",\"returns\":{\"_0\":\"The total free assets in Dopex pools.\"}},\"freePoolPositionInToken01(address)\":{\"details\":\"Retrieves the total free liquidity in token0 and token1 in the pool.\",\"params\":{\"automator\":\"The automator contract.\"},\"returns\":{\"sumAmount0\":\"The total free liquidity in token0.\",\"sumAmount1\":\"The total free liquidity in token1.\"}},\"getAutomatorPositions(address)\":{\"details\":\"Retrieves the positions of the automator.\",\"returns\":{\"balanceCounterAsset\":\"The balance of the counter asset.\",\"balanceDepositAsset\":\"The balance of the deposit asset.\",\"rebalanceTicks\":\"An array of structs representing the active ticks and its liquidity.\"}},\"getTickAllLiquidity(address,int24)\":{\"details\":\"Retrieves the total liquidity of a given tick range.\",\"params\":{\"tick\":\"The tick value representing the range.\"},\"returns\":{\"_0\":\"The total liquidity of the tick range.\"}},\"getTickFreeLiquidity(address,int24)\":{\"details\":\"Retrieves the amount of free liquidity for a given tick.\",\"params\":{\"tick\":\"The tick value for which to retrieve the free liquidity.\"},\"returns\":{\"freeLiquidity\":\"The amount of free liquidity for the specified tick.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/StrykeVaultInspectorV2.sol\":\"StrykeVaultInspectorV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// @return observationIndex The index of the last oracle observation that was written,\\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    /// @return The liquidity at the current price of the pool\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper\\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return liquidity The amount of liquidity in the position,\\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// @return initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x44fa2ce1182f6c2f6bead3d1737804bf7e112252ae86e0f2e92f9b8249603f43\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) > 0) {\\n                require(result < type(uint256).max);\\n                result++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    error T();\\n    error R();\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\n\\n            uint256 ratio = absTick & 0x1 != 0\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\n                : 0x100000000000000000000000000000000;\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        unchecked {\\n            // second inequality must be < because the price can never reach the price at the max tick\\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = ratio;\\n            uint256 msb = 0;\\n\\n            assembly {\\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(5, gt(r, 0xFFFFFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(4, gt(r, 0xFFFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(3, gt(r, 0xFF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(2, gt(r, 0xF))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := shl(1, gt(r, 0x3))\\n                msb := or(msb, f)\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                let f := gt(r, 0x1)\\n                msb := or(msb, f)\\n            }\\n\\n            if (msb >= 128) r = ratio >> (msb - 127);\\n            else r = ratio << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/FixedPoint96.sol';\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) private pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        unchecked {\\n            return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n        }\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        unchecked {\\n            return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n        }\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n            return\\n                FullMath.mulDiv(\\n                    uint256(liquidity) << FixedPoint96.RESOLUTION,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    sqrtRatioBX96\\n                ) / sqrtRatioAX96;\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        unchecked {\\n            return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n        }\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42b9bc79b44cfe16049616866862b7eb8bd7b342df1e3da5c7497506f007ecdb\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IOrangeQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOrangeQuoter {\\n    /**\\n     * @notice Quote request\\n     * @param baseToken The base token to get a quote for\\n     * @param quoteToken The quote token\\n     * @param baseAmount The base amount with decimals\\n     * @param baseUsdFeed The base token USD price feed by Chainlink\\n     * @param quoteUsdFeed The quote token USD price feed by Chainlink\\n     */\\n    struct QuoteRequest {\\n        address baseToken;\\n        address quoteToken;\\n        uint256 baseAmount;\\n        address baseUsdFeed;\\n        address quoteUsdFeed;\\n    }\\n\\n    function getQuote(QuoteRequest memory req) external view returns (uint256 quote);\\n}\\n\",\"keccak256\":\"0xb69757fd163154040949572f18449db88b72a75c6f5c0118a6641924f94d4433\",\"license\":\"GPL-3.0\"},\"contracts/lib/UniswapV3SingleTickLiquidityLibV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.19;\\n\\nimport {IUniswapV3SingleTickLiquidityHandlerV2} from \\\"../vendor/dopexV2/IUniswapV3SingleTickLiquidityHandlerV2.sol\\\";\\nimport {LiquidityAmounts} from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport {TickMath} from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\n\\n/**\\n * @title UniswapV3SingleTickLiquidityLib\\n * @dev Library for managing liquidity in a single Uniswap V3 tick.\\n * @author Orange Finance\\n */\\nlibrary UniswapV3SingleTickLiquidityLibV3 {\\n    using TickMath for int24;\\n\\n    struct PositionDetailParams {\\n        IUniswapV3SingleTickLiquidityHandlerV2 handler;\\n        address pool;\\n        address hook;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        address owner;\\n    }\\n\\n    /**\\n     * @dev Calculates the unique token ID for a given set of parameters.\\n     * @param handler The instance of the IUniswapV3SingleTickLiquidityHandlerV2 contract.\\n     * @param pool The address of the Uniswap V3 pool.\\n     * @param tickLower The lower tick of the range.\\n     * @param tickUpper The upper tick of the range.\\n     * @return The unique token ID.\\n     */\\n    function tokenId(\\n        IUniswapV3SingleTickLiquidityHandlerV2 handler,\\n        address pool,\\n        address hook,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(handler, pool, hook, tickLower, tickUpper)));\\n    }\\n\\n    /**\\n     * @dev Get the position detail of a given owner and token ID.\\n     * @dev option fee is already added in the liquidity via UniswapV3SingleTickLiquidityHandlerV2.donateToLiquidity function\\n     * @param params The parameters to request position detail.\\n     * @return all The total amount of liquidity the owner has.\\n     * @return redeemable The amount of liquidity that can be redeemed.\\n     * @return locked The amount of liquidity that is locked.\\n     * @return swapFee0 The amount of UniswapV3 Pool swap fee in token0.\\n     * @return swapFee1 The amount of UniswapV3 Pool swap fee in token1.\\n     * @notice swap fee (TokenIdInfo.tokenOwed0/1) is updated when the position is modified (mint/burn/use/unusePosition is called)\\n     * Automator modifies position when rebalance/redeem is called. Therefore, swap fee might be outdated in between these operations.\\n     */\\n    function positionDetail(\\n        PositionDetailParams memory params\\n    ) internal view returns (uint128 all, uint128 redeemable, uint128 locked, uint256 swapFee0, uint256 swapFee1) {\\n        uint256 _tokenId = tokenId(params.handler, params.pool, params.hook, params.tickLower, params.tickUpper);\\n        uint256 _shares = params.handler.balanceOf(params.owner, _tokenId);\\n        if (_shares == 0) return (0, 0, 0, 0, 0);\\n\\n        IUniswapV3SingleTickLiquidityHandlerV2.TokenIdInfo memory _tki = params.handler.tokenIds(_tokenId);\\n\\n        all = params.handler.convertToAssets(uint128(_shares), _tokenId);\\n\\n        // Starting from handler v2, totalLiquidity might be less than liquidityUsed because reservedLiquidity has been introduced.\\n        // Therefore, if totalLiquidity is less than liquidityUsed, we should return 0 to avoid underflow.\\n        uint128 freePool = _tki.totalLiquidity < _tki.liquidityUsed ? 0 : _tki.totalLiquidity - _tki.liquidityUsed;\\n        // If the vault is an only liquidity provider in the pool, 1 liquidity is locked in the pool.\\n        // because when first stryke mint, the liquidity calculation result is less by 1 than from second mint.\\n        // first mint does not use \\\"convertToAssets\\\" function, and not round up the result.\\n        if (all > _tki.totalLiquidity && freePool > 0) freePool -= 1;\\n        locked = all > freePool ? all - freePool : 0;\\n\\n        redeemable = all - locked;\\n\\n        // same fee calculation as Stryke handler:\\n        // https://github.com/stryke-xyz/dopex-v2-clamm/blob/0271d8c0ccd98e357935051de78d21343d11c811/src/handlers/UniswapV3SingleTickLiquidityHandlerV2.sol#L579\\n\\n        (swapFee0, swapFee1) = _feesTokenOwed(\\n            params.tickLower,\\n            params.tickUpper,\\n            _tki.totalLiquidity,\\n            redeemable,\\n            _tki.tokensOwed0,\\n            _tki.tokensOwed1\\n        );\\n    }\\n\\n    function _feesTokenOwed(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 totalLiquidity,\\n        uint128 userLiquidity,\\n        uint128 tokensOwed0,\\n        uint128 tokensOwed1\\n    ) private pure returns (uint256 swapFee0, uint256 swapFee1) {\\n        uint256 totalLiquidity0 = LiquidityAmounts.getAmount0ForLiquidity(\\n            tickLower.getSqrtRatioAtTick(),\\n            tickUpper.getSqrtRatioAtTick(),\\n            totalLiquidity\\n        );\\n\\n        uint256 totalLiquidity1 = LiquidityAmounts.getAmount1ForLiquidity(\\n            tickLower.getSqrtRatioAtTick(),\\n            tickUpper.getSqrtRatioAtTick(),\\n            totalLiquidity\\n        );\\n\\n        uint256 userLiquidity0 = LiquidityAmounts.getAmount0ForLiquidity(\\n            tickLower.getSqrtRatioAtTick(),\\n            tickUpper.getSqrtRatioAtTick(),\\n            userLiquidity\\n        );\\n\\n        uint256 userLiquidity1 = LiquidityAmounts.getAmount1ForLiquidity(\\n            tickLower.getSqrtRatioAtTick(),\\n            tickUpper.getSqrtRatioAtTick(),\\n            userLiquidity\\n        );\\n\\n        if (totalLiquidity0 > 0) {\\n            swapFee0 = uint128((tokensOwed0 * userLiquidity0) / totalLiquidity0);\\n        }\\n        if (totalLiquidity1 > 0) {\\n            swapFee1 = uint128((tokensOwed1 * userLiquidity1) / totalLiquidity1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2fad310ddafc1f35cd2b969b493c3052a7c030a5877c12a5d1a247c617b11780\",\"license\":\"GPL-3.0\"},\"contracts/periphery/StrykeVaultInspectorV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.19;\\n\\nimport {LiquidityAmounts} from \\\"@uniswap/v3-periphery/contracts/libraries/LiquidityAmounts.sol\\\";\\nimport {TickMath} from \\\"@uniswap/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport {FullMath} from \\\"@uniswap/v3-core/contracts/libraries/FullMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {IOrangeStrykeLPAutomatorV2_1} from \\\"../v2_1/IOrangeStrykeLPAutomatorV2_1.sol\\\";\\nimport {IUniswapV3SingleTickLiquidityHandlerV2} from \\\"./../vendor/dopexV2/IUniswapV3SingleTickLiquidityHandlerV2.sol\\\";\\nimport {IOrangeQuoter} from \\\"./../interfaces/IOrangeQuoter.sol\\\";\\nimport {UniswapV3SingleTickLiquidityLibV3} from \\\"./../lib/UniswapV3SingleTickLiquidityLibV3.sol\\\";\\nimport {IUniswapV3PoolAdapter} from \\\"../pool-adapter/IUniswapV3PoolAdapter.sol\\\";\\n\\ncontract StrykeVaultInspectorV2 {\\n    using UniswapV3SingleTickLiquidityLibV3 for IUniswapV3SingleTickLiquidityHandlerV2;\\n    using SafeCast for uint256;\\n    using TickMath for int24;\\n\\n    /// @dev Cache position calculation data to avoid stack too deep error. Used in \\\"freeAssets\\\".\\n    struct PositionCalcCache {\\n        uint128 liquidity;\\n        int24 lowerTick;\\n        int24 upperTick;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 swapFee0;\\n        uint256 swapFee1;\\n        uint160 sqrtRatioX96;\\n    }\\n\\n    /**\\n     * @dev Retrieves the total free liquidity in token0 and token1 in the pool.\\n     * @param automator The automator contract.\\n     * @return sumAmount0 The total free liquidity in token0.\\n     * @return sumAmount1 The total free liquidity in token1.\\n     */\\n    function freePoolPositionInToken01(\\n        IOrangeStrykeLPAutomatorV2_1 automator\\n    ) public view returns (uint256 sumAmount0, uint256 sumAmount1) {\\n        IUniswapV3SingleTickLiquidityHandlerV2 _handler = automator.handler();\\n        // when handler is paused, no liquidity can be withdrawn\\n        if (_handler.paused()) return (0, 0);\\n\\n        IUniswapV3PoolAdapter poolAdapter = automator.poolAdapter();\\n        address _handlerHook = automator.handlerHook();\\n        int24[] memory _ticks = automator.getActiveTicks();\\n        int24 _spacing = automator.poolTickSpacing();\\n        uint256 _tLen = _ticks.length;\\n\\n        PositionCalcCache memory _cache;\\n\\n        (uint160 _sqrtRatioX96, , , , , , ) = poolAdapter.slot0();\\n\\n        for (uint256 i = 0; i < _tLen; ) {\\n            _cache.lowerTick = _ticks[i];\\n            _cache.upperTick = _cache.lowerTick + _spacing;\\n\\n            (, _cache.liquidity, , _cache.swapFee0, _cache.swapFee1) = UniswapV3SingleTickLiquidityLibV3.positionDetail(\\n                UniswapV3SingleTickLiquidityLibV3.PositionDetailParams({\\n                    handler: _handler,\\n                    pool: poolAdapter.pool(),\\n                    hook: _handlerHook,\\n                    tickLower: _cache.lowerTick,\\n                    tickUpper: _cache.upperTick,\\n                    owner: address(automator)\\n                })\\n            );\\n\\n            (_cache.amount0, _cache.amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                _sqrtRatioX96,\\n                _cache.lowerTick.getSqrtRatioAtTick(),\\n                _cache.upperTick.getSqrtRatioAtTick(),\\n                _cache.liquidity\\n            );\\n\\n            sumAmount0 += (_cache.amount0 + _cache.swapFee0);\\n            sumAmount1 += (_cache.amount1 + _cache.swapFee1);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieves the total liquidity of a given tick range.\\n     * @param tick The tick value representing the range.\\n     * @return The total liquidity of the tick range.\\n     */\\n    function getTickAllLiquidity(IOrangeStrykeLPAutomatorV2_1 automator, int24 tick) external view returns (uint128) {\\n        IUniswapV3SingleTickLiquidityHandlerV2 _handler = automator.handler();\\n        address _pool = automator.poolAdapter().pool();\\n        address _handlerHook = automator.handlerHook();\\n        int24 _spacing = automator.poolTickSpacing();\\n\\n        uint256 _share = _handler.balanceOf(\\n            address(automator),\\n            _handler.tokenId(_pool, _handlerHook, tick, tick + _spacing)\\n        );\\n\\n        if (_share == 0) return 0;\\n\\n        return\\n            _handler.convertToAssets(_share.toUint128(), _handler.tokenId(_pool, _handlerHook, tick, tick + _spacing));\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount of free liquidity for a given tick.\\n     * @param tick The tick value for which to retrieve the free liquidity.\\n     * @return freeLiquidity The amount of free liquidity for the specified tick.\\n     */\\n    function getTickFreeLiquidity(\\n        IOrangeStrykeLPAutomatorV2_1 automator,\\n        int24 tick\\n    ) external view returns (uint128 freeLiquidity) {\\n        IUniswapV3SingleTickLiquidityHandlerV2 _handler = automator.handler();\\n        address _pool = automator.poolAdapter().pool();\\n        address _handlerHook = automator.handlerHook();\\n        int24 _spacing = automator.poolTickSpacing();\\n\\n        (, freeLiquidity, , , ) = UniswapV3SingleTickLiquidityLibV3.positionDetail(\\n            UniswapV3SingleTickLiquidityLibV3.PositionDetailParams({\\n                handler: _handler,\\n                pool: _pool,\\n                hook: _handlerHook,\\n                tickLower: tick,\\n                tickUpper: tick + _spacing,\\n                owner: address(automator)\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculates the total free assets in Dopex pools and returns the sum.\\n     * Free assets are the assets that can be redeemed from the pools.\\n     * This function iterates through the active ticks in the pool and calculates the liquidity\\n     * that can be redeemed for each tick. It then converts the liquidity to token amounts using\\n     * the current sqrt ratio and tick values. The sum of token amounts is calculated and merged\\n     * with the total assets in the automator. Finally, the quote value is obtained using the\\n     * current tick and the base value, and returned as the result.\\n     * @return The total free assets in Dopex pools.\\n     */\\n    function freeAssets(IOrangeStrykeLPAutomatorV2_1 automator) public view returns (uint256) {\\n        // 1. calculate the free token0 & token1 in Dopex pools\\n        (uint256 _sum0, uint256 _sum1) = freePoolPositionInToken01(automator);\\n\\n        // 2. merge into the total assets in the automator\\n        IERC20 _asset = automator.asset();\\n        IERC20 _counterAsset = automator.counterAsset();\\n        (uint256 _base, uint256 _quote) = (\\n            _counterAsset.balanceOf(address(automator)),\\n            _asset.balanceOf(address(automator))\\n        );\\n\\n        if (address(_asset) == automator.poolAdapter().token0()) {\\n            _base += _sum1;\\n            _quote += _sum0;\\n        } else {\\n            _base += _sum0;\\n            _quote += _sum1;\\n        }\\n\\n        return\\n            _quote +\\n            automator.quoter().getQuote(\\n                IOrangeQuoter.QuoteRequest({\\n                    baseToken: address(_counterAsset),\\n                    quoteToken: address(_asset),\\n                    baseAmount: _base,\\n                    baseUsdFeed: automator.counterAssetUsdFeed(),\\n                    quoteUsdFeed: automator.assetUsdFeed()\\n                })\\n            );\\n    }\\n\\n    function convertSharesToPairAssets(\\n        IOrangeStrykeLPAutomatorV2_1 automator,\\n        uint256 shares\\n    ) external view returns (uint256 assets, uint256 counterAssets) {\\n        (address token0, address token1) = (automator.poolAdapter().token0(), automator.poolAdapter().token1());\\n        (uint256 position0, uint256 position1) = freePoolPositionInToken01(automator);\\n        (uint256 balance0, uint256 balance1) = (\\n            IERC20(token0).balanceOf(address(automator)),\\n            IERC20(token1).balanceOf(address(automator))\\n        );\\n\\n        assets = FullMath.mulDiv(position0 + balance0, shares, IERC20(address(automator)).totalSupply());\\n        counterAssets = FullMath.mulDiv(position1 + balance1, shares, IERC20(address(automator)).totalSupply());\\n\\n        if (token1 == address(automator.asset())) (assets, counterAssets) = (counterAssets, assets);\\n    }\\n\\n    /**\\n     * @dev Retrieves the positions of the automator.\\n     * @return balanceDepositAsset The balance of the deposit asset.\\n     * @return balanceCounterAsset The balance of the counter asset.\\n     * @return rebalanceTicks An array of structs representing the active ticks and its liquidity.\\n     */\\n    function getAutomatorPositions(\\n        IOrangeStrykeLPAutomatorV2_1 automator\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 balanceDepositAsset,\\n            uint256 balanceCounterAsset,\\n            IOrangeStrykeLPAutomatorV2_1.RebalanceTick[] memory rebalanceTicks\\n        )\\n    {\\n        rebalanceTicks = _rebalanceTicks(automator);\\n\\n        IERC20 _asset = automator.asset();\\n        IERC20 _counterAsset = automator.counterAsset();\\n\\n        return (_asset.balanceOf(address(automator)), _counterAsset.balanceOf(address(automator)), rebalanceTicks);\\n    }\\n\\n    function _rebalanceTicks(\\n        IOrangeStrykeLPAutomatorV2_1 automator\\n    ) private view returns (IOrangeStrykeLPAutomatorV2_1.RebalanceTick[] memory rebalanceTicks) {\\n        address _pool = automator.poolAdapter().pool();\\n        IUniswapV3SingleTickLiquidityHandlerV2 _handler = automator.handler();\\n        address _handlerHook = automator.handlerHook();\\n        int24 _spacing = automator.poolTickSpacing();\\n        int24[] memory _ticks = automator.getActiveTicks();\\n        uint256 _tLen = _ticks.length;\\n        uint256 _tid;\\n\\n        PositionCalcCache memory _cache;\\n        rebalanceTicks = new IOrangeStrykeLPAutomatorV2_1.RebalanceTick[](_tLen);\\n\\n        for (uint256 i = 0; i < _tLen; ) {\\n            _cache.lowerTick = _ticks[i];\\n            _cache.upperTick = _cache.lowerTick + _spacing;\\n            _tid = _handler.tokenId(_pool, _handlerHook, _cache.lowerTick, _cache.upperTick);\\n\\n            _cache.liquidity = _handler.convertToAssets(\\n                (_handler.balanceOf(address(automator), _tid)).toUint128(),\\n                _tid\\n            );\\n\\n            rebalanceTicks[i] = IOrangeStrykeLPAutomatorV2_1.RebalanceTick({\\n                tick: _cache.lowerTick,\\n                liquidity: _cache.liquidity\\n            });\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2523b0aed32449eeae5dea1dede5e739b0b162e61679e35c6501e04b604b183f\",\"license\":\"GPL-3.0\"},\"contracts/pool-adapter/IUniswapV3PoolAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.19;\\n\\nimport {IUniswapV3PoolState} from \\\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\\\";\\nimport {IUniswapV3PoolImmutables} from \\\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\\\";\\nimport {IUniswapV3PoolDerivedState} from \\\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\\\";\\n\\ninterface IUniswapV3PoolAdapter is IUniswapV3PoolState, IUniswapV3PoolImmutables, IUniswapV3PoolDerivedState {\\n    /**\\n     * @dev Returns the address of actual amm contract (e.g. UniswapV3, PancakeV3...)\\n     * @return pool The address of the amm contract.\\n     */\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x53d586bb862ed825aabe05c24cca7054a542ecb53b72ed46fc9d3bbade59247e\",\"license\":\"GPL-3.0\"},\"contracts/swap-proxy/IOrangeSwapProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IOrangeSwapProxy\\n * @dev Interface for the OrangeSwapProxy contract.\\n */\\ninterface IOrangeSwapProxy {\\n    /**\\n     * @dev Struct representing a swap input request.\\n     * @param provider The address of the provider.\\n     * @param swapCalldata The calldata for the swap.\\n     * @param expectTokenIn The input token for the swap.\\n     * @param expectTokenOut The output token for the swap.\\n     * @param expectAmountIn The expected amount of input token.\\n     * @param inputDelta The input delta value.\\n     */\\n    struct SwapInputRequest {\\n        address provider;\\n        bytes swapCalldata;\\n        IERC20 expectTokenIn;\\n        IERC20 expectTokenOut;\\n        uint256 expectAmountIn;\\n        uint256 inputDelta;\\n    }\\n\\n    /**\\n     * @dev Returns the delta scale value which is used to calculate swap input delta.\\n     * @return The delta scale value.\\n     */\\n    function deltaScale() external view returns (uint256);\\n\\n    /**\\n     * @dev Performs a safe input swap to prevent malicious swap request to the automator.\\n     * @param request The swap input request.\\n     */\\n    function safeInputSwap(SwapInputRequest memory request) external;\\n}\\n\",\"keccak256\":\"0x7896ea68496a92771d5e8f5657eab62ecaa10e57ed361020e41abd7fa8001ce6\",\"license\":\"GPL-3.0\"},\"contracts/v2_1/IOrangeStrykeLPAutomatorV2_1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.19;\\n\\nimport {IOrangeSwapProxy} from \\\"../swap-proxy/IOrangeSwapProxy.sol\\\";\\nimport {IUniswapV3PoolAdapter} from \\\"../pool-adapter/IUniswapV3PoolAdapter.sol\\\";\\nimport {IOrangeQuoter} from \\\"../interfaces/IOrangeQuoter.sol\\\";\\nimport {IDopexV2PositionManager} from \\\"../vendor/dopexV2/IDopexV2PositionManager.sol\\\";\\nimport {IUniswapV3SingleTickLiquidityHandlerV2} from \\\"../vendor/dopexV2/IUniswapV3SingleTickLiquidityHandlerV2.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n/* solhint-disable contract-name-camelcase */\\n\\n/**\\n * @title IOrangeDopexV2LPAutomator\\n * @dev Interface for the Orange Dopex V2 LP Automator contract.\\n * @author Orange Finance\\n */\\ninterface IOrangeStrykeLPAutomatorV2_1 {\\n    /**\\n     * @dev Struct representing locked Dopex shares.\\n     * @param tokenId The ID of the token.\\n     * @param shares The number of shares locked.\\n     */\\n    struct LockedDopexShares {\\n        uint256 tokenId;\\n        uint256 shares;\\n    }\\n\\n    /**\\n     * @dev Struct representing tick information for rebalancing.\\n     * @param tick The tick value.\\n     * @param liquidity The liquidity at the tick.\\n     */\\n    struct RebalanceTick {\\n        int24 tick;\\n        uint128 liquidity;\\n    }\\n\\n    /**\\n     * @dev Struct representing user data for flash loans.\\n     * @param swapProxy The address of the OrangeSwapProxy contract.\\n     * @param swapRequest The swap detail sent to the OrangeSwapProxy contract.\\n     * @param mintCalldata The calldata for minting Stryke positions.\\n     * @param burnCalldata The calldata for burning Stryke positions.\\n     */\\n    struct FlashLoanUserData {\\n        address swapProxy;\\n        IOrangeSwapProxy.SwapInputRequest swapRequest;\\n        bytes[] mintCalldata;\\n        bytes[] burnCalldata;\\n    }\\n\\n    event Deposit(address indexed sender, uint256 assets, uint256 sharesMinted);\\n    event Redeem(address indexed sender, uint256 shares, uint256 assetsWithdrawn);\\n    event Rebalance(address indexed sender, RebalanceTick[] ticksMint, RebalanceTick[] ticksBurn);\\n\\n    event SetOwner(address indexed user, bool approved);\\n    event SetStrategist(address indexed user, bool approved);\\n    event SetDepositCap(uint256 depositCap);\\n    event SetDepositFeePips(uint24 depositFeePips);\\n    event SetProxyWhitelist(address indexed proxy, bool approved);\\n    event SetSwapInputDelta(uint256 swapInputDelta);\\n\\n    error AddressZero();\\n    error AmountZero();\\n    error MaxTicksReached();\\n    error InvalidRebalanceParams();\\n    error MinAssetsRequired(uint256 minAssets, uint256 actualAssets);\\n    error TokenAddressMismatch();\\n    error TokenNotPermitted();\\n    error DepositTooSmall();\\n    error DepositCapExceeded();\\n    error SharesTooSmall();\\n    error FeePipsTooHigh();\\n    error UnsupportedDecimals();\\n    error MinDepositAssetsTooSmall();\\n    error Unauthorized();\\n    error ProxyAlreadyWhitelisted();\\n    error FlashLoan_Unauthorized();\\n\\n    /**\\n     * @dev Returns the position manager contract.\\n     */\\n    function manager() external view returns (IDopexV2PositionManager);\\n\\n    /**\\n     * @dev Returns the liquidity handler contract.\\n     */\\n    function handler() external view returns (IUniswapV3SingleTickLiquidityHandlerV2);\\n\\n    /**\\n     * @dev Returns the handler hook contract.\\n     */\\n    function handlerHook() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amm pool contract.\\n     * @notice This function is used by merkl to get amm pool address\\n     */\\n    function pool() external view returns (address);\\n\\n    /**\\n     * @dev Returns the Chainlink quoter contract.\\n     */\\n    function quoter() external view returns (IOrangeQuoter);\\n\\n    /**\\n     * @dev Returns the address of the asset USD feed.\\n     */\\n    function assetUsdFeed() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the counter asset USD feed.\\n     */\\n    function counterAssetUsdFeed() external view returns (address);\\n\\n    /**\\n     * @dev Returns the deposit asset token contract.\\n     */\\n    function asset() external view returns (IERC20);\\n\\n    /**\\n     * @dev Returns the counter asset token contract.\\n     */\\n    function counterAsset() external view returns (IERC20);\\n\\n    /**\\n     * @dev Returns the tick spacing of the pool.\\n     */\\n    function poolTickSpacing() external view returns (int24);\\n\\n    /**\\n     * @dev Retrieves the active ticks as an array of int24 values.\\n     * @return An array of int24 values representing the active ticks.\\n     */\\n    function getActiveTicks() external view returns (int24[] memory);\\n\\n    /**\\n     * @dev Calculates the total assets in the automator contract.\\n     * It includes the assets in the Dopex pools and the automator contract itself.\\n     * @return The total assets in the automator contract.\\n     */\\n    function totalAssets() external view returns (uint256);\\n\\n    /**\\n     * @dev Converts the given amount of assets to shares based on the total supply and total assets.\\n     * @param assets The amount of assets to convert to shares.\\n     * @return The converted amount of shares.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    /**\\n     * @dev Converts the given amount of shares to assets based on the total supply and total assets.\\n     * @param shares The amount of shares to convert to assets.\\n     * @return The converted amount of assets.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the pool adapter contract. it is used to normalize other pool (e.g. pancake) to the same interface as the Uniswap V3 pool.\\n     * @return poolAdapter The pool adapter contract.\\n     */\\n    function poolAdapter() external view returns (IUniswapV3PoolAdapter);\\n\\n    /**\\n     * @dev Returns the minimum deposit of assets.\\n     */\\n    function minDepositAssets() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the deposit cap.\\n     */\\n    function depositCap() external view returns (uint256);\\n\\n    /**\\n     * @dev Deposits the specified amount of assets into the contract and returns the corresponding number of shares.\\n     * @param assets The amount of assets to deposit.\\n     * @return shares The number of shares received after the deposit.\\n     * @notice This function allows users to deposit assets into the contract.\\n     * It performs various checks such as ensuring the amount is not zero, not below the minimum deposit assets, and not exceeding the deposit cap.\\n     * If the total supply of shares is zero, a small portion is minted to the zero address, and the remaining shares are assigned to the depositor.\\n     * If there is a performance fee, it is deducted from the shares and minted to the performance fee recipient.\\n     * Finally, the shares are minted to the depositor's address and the assets are transferred from the depositor to the contract.\\n     */\\n    function deposit(uint256 assets) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Redeems a specified number of shares and returns the redeemed assets along with the locked Dopex shares.\\n     * @param shares The number of shares to redeem.\\n     * @param minAssets The minimum required assets to be redeemed.\\n     * @return assets The redeemed assets.\\n     * @return lockedDopexShares An array of locked Dopex shares.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        uint256 minAssets\\n    ) external returns (uint256 assets, LockedDopexShares[] memory lockedDopexShares);\\n\\n    /**\\n     * @dev Rebalance the liquidity positions in the OrangeDopexV2LPAutomator contract.\\n     * Only the address with the STRATEGIST_ROLE can call this function.\\n     *\\n     * @param ticksMint An array of RebalanceTick structs representing the ticks to be minted.\\n     * @param ticksBurn An array of RebalanceTick structs representing the ticks to be burned.\\n     * @param swapProxy The address of the OrangeSwapProxy contract.\\n     * @param swapRequest The swap detail sent to the OrangeSwapProxy contract.\\n     * @param flashLoanData The flash loan data for the balancer v2.\\n     */\\n    function rebalance(\\n        RebalanceTick[] calldata ticksMint,\\n        RebalanceTick[] calldata ticksBurn,\\n        address swapProxy,\\n        IOrangeSwapProxy.SwapInputRequest calldata swapRequest,\\n        bytes calldata flashLoanData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc3bafb14c628cc7bd88bbe1397cac4cc0cd560e3e59ae266770a4794ad0fdfff\",\"license\":\"GPL-3.0\"},\"contracts/vendor/dopexV2/IDopexV2PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport {IHandler} from \\\"./IHandler.sol\\\";\\n\\ninterface IDopexV2PositionManager {\\n    function mintPosition(IHandler _handler, bytes calldata _mintPositionData) external returns (uint256 sharesMinted);\\n\\n    function burnPosition(IHandler _handler, bytes calldata _burnPositionData) external returns (uint256 sharesBurned);\\n\\n    function usePosition(\\n        IHandler _handler,\\n        bytes calldata _usePositionData\\n    ) external returns (address[] memory tokens, uint256[] memory amounts, uint256 liquidityUsed);\\n\\n    function unusePosition(\\n        IHandler _handler,\\n        bytes calldata _unusePositionData\\n    ) external returns (uint256[] memory amounts, uint256 liquidity);\\n\\n    function donateToPosition(\\n        IHandler _handler,\\n        bytes calldata _donatePosition\\n    ) external returns (uint256[] memory amounts, uint256 liquidity);\\n\\n    function updateWhitelistHandlerWithApp(address handler, address app, bool status) external;\\n}\\n\",\"keccak256\":\"0x05708f4b8f230df767ba0300e667d928a510632a0d4f7f650b4c5d7535478740\",\"license\":\"UNLICENSED\"},\"contracts/vendor/dopexV2/IERC6909.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ERC-6909: Interface for ERC-6909: Batch Transfers\\n * @author Orange Finance\\n * @notice This is the interface for the ERC-6909 implementation written in the transmissions11/solmate repository.\\n * @dev implementation url: https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC6909.sol\\n */\\ninterface IERC6909 {\\n    function isOperator(address holder, address operator) external view returns (bool);\\n\\n    function balanceOf(address holder, uint256 tokenId) external view returns (uint256);\\n\\n    function allowance(address holder, address spender) external view returns (uint256);\\n\\n    function transfer(address receiver, uint256 id, uint256 amount) external;\\n\\n    function transferFrom(address sender, address receiver, uint256 id, uint256 amount) external;\\n\\n    function approve(address spender, uint256 id, uint256 amount) external;\\n\\n    function setOperator(address operator, bool approved) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x39320115b4e3ab639d5c1a974305242ccdcfc45d40b3d94ba71fbe8a2f4a4afd\",\"license\":\"MIT\"},\"contracts/vendor/dopexV2/IHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\ninterface IHandler {\\n    function getHandlerIdentifier(bytes calldata _data) external view returns (uint256 handlerIdentifierId);\\n\\n    function tokensToPullForMint(\\n        bytes calldata _mintPositionData\\n    ) external view returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    function mintPositionHandler(\\n        address context,\\n        bytes calldata _mintPositionData\\n    ) external returns (uint256 sharesMinted);\\n\\n    function burnPositionHandler(\\n        address context,\\n        bytes calldata _burnPositionData\\n    ) external returns (uint256 sharesBurned);\\n\\n    function usePositionHandler(\\n        bytes calldata _usePositionData\\n    ) external returns (address[] memory tokens, uint256[] memory amounts, uint256 liquidityUsed);\\n\\n    function tokensToPullForUnUse(\\n        bytes calldata _unusePositionData\\n    ) external view returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    function unusePositionHandler(\\n        bytes calldata _unusePositionData\\n    ) external returns (uint256[] memory amounts, uint256 liquidity);\\n\\n    function donateToPosition(\\n        bytes calldata _donatePosition\\n    ) external returns (uint256[] memory amounts, uint256 liquidity);\\n\\n    function tokensToPullForDonate(\\n        bytes calldata _donatePosition\\n    ) external view returns (address[] memory tokens, uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xab04a7458605284ee3348ad7653506a6a72f582de4db9f9bc800600b0abf2b13\",\"license\":\"UNLICENSED\"},\"contracts/vendor/dopexV2/IUniswapV3SingleTickLiquidityHandlerV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.19;\\n\\nimport {IERC6909} from \\\"./IERC6909.sol\\\";\\nimport {IHandler} from \\\"./IHandler.sol\\\";\\n\\ninterface IUniswapV3SingleTickLiquidityHandlerV2 is IERC6909, IHandler {\\n    struct TokenIdInfo {\\n        uint128 totalLiquidity;\\n        uint128 totalSupply;\\n        uint128 liquidityUsed;\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        uint128 tokensOwed0;\\n        uint128 tokensOwed1;\\n        uint64 lastDonation;\\n        uint128 donatedLiquidity;\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        uint128 reservedLiquidity;\\n    }\\n\\n    struct MintPositionParams {\\n        address pool;\\n        address hook;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint128 liquidity;\\n    }\\n\\n    struct BurnPositionParams {\\n        address pool;\\n        address hook;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint128 shares;\\n    }\\n\\n    struct ReserveLiquidityData {\\n        uint128 liquidity;\\n        uint64 lastReserve;\\n    }\\n\\n    struct UsePositionParams {\\n        address pool;\\n        address hook;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint128 liquidityToUse;\\n    }\\n\\n    struct UnusePositionParams {\\n        address pool;\\n        address hook;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint128 liquidityToUnuse;\\n    }\\n\\n    function tokenIds(uint256) external view returns (TokenIdInfo memory);\\n\\n    function convertToShares(uint128 liquidity, uint256 tokenId) external view returns (uint128 shares);\\n\\n    function convertToAssets(uint128 shares, uint256 tokenId) external view returns (uint128 liquidity);\\n\\n    function lockedBlockDuration() external view returns (uint64);\\n\\n    function paused() external view returns (bool);\\n\\n    function reserveLiquidity(bytes calldata reserveLiquidityParam) external;\\n\\n    function withdrawReserveLiquidity(bytes calldata reserveLiquidityParam) external;\\n\\n    function whitelistedApps(address app) external view returns (bool);\\n\\n    function updateWhitelistedApps(address app, bool whitelisted) external;\\n\\n    function reservedLiquidityPerUser(\\n        uint256 tokenId,\\n        address user\\n    ) external view returns (ReserveLiquidityData memory);\\n\\n    function reserveCooldown() external returns (uint64);\\n}\\n\",\"keccak256\":\"0xee05cd02c85833ad00394b08a6bf6b69e70a3a95ebf090360f5713c167298ba1\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a1d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632494da9214610067578063365211961461009757806344086bd7146100aa5780637829596a146100d2578063b234c430146100f4578063c3c6ace314610115575b600080fd5b61007a610075366004612488565b610128565b6040516001600160801b0390911681526020015b60405180910390f35b61007a6100a5366004612488565b61047e565b6100bd6100b83660046124c1565b6106f2565b6040805192835260208301919091520161008e565b6100e56100e03660046124c1565b610b98565b60405161008e939291906124de565b6101076101023660046124c1565b610d57565b60405190815260200161008e565b6100bd61012336600461254a565b611249565b600080836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018d9190612576565b90506000846001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190612576565b6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190612576565b90506000856001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190612576565b90506000866001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906125a3565b905060006001600160a01b03851662fdd58e8961035687878c61034389826125d6565b6001600160a01b038d16939291906115db565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa15801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c391906125fb565b9050806000036103db57600095505050505050610478565b846001600160a01b03166328daa1176103f383611632565b61040387878c61034389826125d6565b6040516001600160e01b031960e085901b1681526001600160801b0390921660048301526024820152604401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610470919061262b565b955050505050505b92915050565b600080836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190612576565b90506000846001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105499190612576565b6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa9190612576565b90506000856001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190612576565b90506000866001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906125a3565b90506106e26040518060c00160405280866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b031681526020018860020b815260200183896106c891906125d6565b60020b8152602001896001600160a01b03168152506116a3565b50919a9950505050505050505050565b6000806000836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190612576565b9050806001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190612656565b156107ce5750600093849350915050565b6000846001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108329190612576565b90506000856001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190612576565b90506000866001600160a01b031663346ac01f6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090291908101906126e2565b90506000876001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096891906125a3565b8251909150610975612404565b6000866001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d9919061279a565b505050505050905060005b83811015610b8a578581815181106109fe576109fe61282d565b60209081029190910181015160020b908401819052610a1e9086906125d6565b836040019060020b908160020b81525050610af76040518060c001604052808b6001600160a01b031681526020018a6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190612576565b6001600160a01b03168152602001896001600160a01b03168152602001856020015160020b8152602001856040015160020b81526020018e6001600160a01b03168152506116a3565b60c088015260a0870152506001600160801b03168452506020830151610b3c908390610b259060020b611944565b610b35866040015160020b611944565b8651611c67565b60808501526060840181905260a0840151610b5691612843565b610b60908c612843565b9a508260c001518360800151610b769190612843565b610b80908b612843565b99506001016109e4565b505050505050505050915091565b6000806060610ba684611d03565b90506000846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190612576565b90506000856001600160a01b031663eba08b2a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190612576565b6040516370a0823160e01b81526001600160a01b038881166004830152919250908316906370a0823190602401602060405180830381865afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce091906125fb565b6040516370a0823160e01b81526001600160a01b0388811660048301528316906370a0823190602401602060405180830381865afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906125fb565b9450945050509193909250565b6000806000610d65846106f2565b915091506000846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcd9190612576565b90506000856001600160a01b031663eba08b2a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e339190612576565b6040516370a0823160e01b81526001600160a01b0388811660048301529192506000918291908416906370a0823190602401602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea691906125fb565b6040516370a0823160e01b81526001600160a01b038a811660048301528616906370a0823190602401602060405180830381865afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906125fb565b91509150876001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190612576565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190612576565b6001600160a01b0316846001600160a01b03160361100c57610ff98583612843565b91506110058682612843565b9050611025565b6110168683612843565b91506110228582612843565b90505b876001600160a01b031663c6bbd5a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190612576565b6001600160a01b031663b524aa2a6040518060a00160405280866001600160a01b03168152602001876001600160a01b031681526020018581526020018b6001600160a01b031663863776e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111269190612576565b6001600160a01b031681526020018b6001600160a01b0316634f3f6c926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111969190612576565b6001600160a01b03908116909152604080516001600160e01b031960e086901b16815283518316600482015260208401518316602482015290830151604482015260608301518216606482015260809092015116608482015260a401602060405180830381865afa15801561120f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123391906125fb565b61123d9082612843565b98975050505050505050565b600080600080856001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190612576565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113129190612576565b866001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612576565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190612576565b915091506000806113e5886106f2565b6040516370a0823160e01b81526001600160a01b038b811660048301529294509092506000918291908716906370a0823190602401602060405180830381865afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b91906125fb565b6040516370a0823160e01b81526001600160a01b038c811660048301528716906370a0823190602401602060405180830381865afa1580156114a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c591906125fb565b909250905061153f6114d78386612843565b8a8c6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153a91906125fb565b612191565b975061154e6114d78285612843565b9650896001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b29190612576565b6001600160a01b0316856001600160a01b0316036115ce579596955b5050505050509250929050565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152600291820b6080840152900b60a0808301919091528351808303909101815260c0909101909252815191012090565b60006001600160801b0382111561169f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840160405180910390fd5b5090565b6000806000806000806116cd8760000151886020015189604001518a606001518b608001516115db565b875160a0890151604051627eeac760e11b81526001600160a01b0391821660048201526024810184905292935060009291169062fdd58e90604401602060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174991906125fb565b90508060000361176c57600080600080600096509650965096509650505061193b565b8751604051636ac3bc6b60e11b8152600481018490526000916001600160a01b03169063d58778d6906024016101a060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da9190612881565b89516040516328daa11760e01b81526001600160801b0385166004820152602481018690529192506001600160a01b0316906328daa11790604401602060405180830381865afa158015611832573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611856919061262b565b9750600081604001516001600160801b031682600001516001600160801b031610611891576040820151825161188c9190612971565b611894565b60005b905081600001516001600160801b0316896001600160801b03161180156118c457506000816001600160801b0316115b156118d7576118d4600182612971565b90505b806001600160801b0316896001600160801b0316116118f7576000611901565b611901818a612971565b965061190d878a612971565b97506119318a606001518b6080015184600001518b8660a001518760c00151612244565b9096509450505050505b91939590929450565b60008060008360020b1261195b578260020b611963565b8260020b6000035b9050620d89e8811115611989576040516315e4079d60e11b815260040160405180910390fd5b6000816001166000036119a057600160801b6119b2565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156119e6576ffff97272373d413259a46990580e213a0260801c5b6004821615611a05576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611a24576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611a43576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611a62576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a81576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611aa0576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611ac0576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611ae0576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611b00576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611b20576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611b40576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611b60576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b80576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611ba0576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611bc1576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611be1576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611c00576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611c1d576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611c3e578060001981611c3a57611c3a612998565b0490505b640100000000810615611c52576001611c55565b60005b60ff16602082901c0192505050919050565b600080836001600160a01b0316856001600160a01b03161115611c88579293925b846001600160a01b0316866001600160a01b031611611cb357611cac85858561234a565b9150611cfa565b836001600160a01b0316866001600160a01b03161015611cec57611cd886858561234a565b9150611ce58587856123b9565b9050611cfa565b611cf78585856123b9565b90505b94509492505050565b60606000826001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d699190612576565b6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dca9190612576565b90506000836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190612576565b90506000846001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e969190612576565b90506000856001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efc91906125a3565b90506000866001600160a01b031663346ac01f6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611f3e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f6691908101906126e2565b80519091506000611f75612404565b8267ffffffffffffffff811115611f8e57611f8e612671565b604051908082528060200260200182016040528015611fd357816020015b6040805180820190915260008082526020820152815260200190600190039081611fac5790505b50985060005b8381101561218357848181518110611ff357611ff361282d565b60209081029190910181015160020b9083018190526120139087906125d6565b60020b60408301819052602083015161203b916001600160a01b038b16918c918b91906115db565b604051627eeac760e11b81526001600160a01b038d8116600483015260248201839052919450908916906328daa117906120bf90839062fdd58e90604401602060405180830381865afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba91906125fb565b611632565b6040516001600160e01b031960e084901b1681526001600160801b03909116600482015260248101869052604401602060405180830381865afa15801561210a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212e919061262b565b6001600160801b0390811683526040805180820190915260208085015160020b82528451909216918101919091528a518b90839081106121705761217061282d565b6020908102919091010152600101611fd9565b505050505050505050919050565b60008080600019858709858702925082811083820303915050806000036121ca57600084116121bf57600080fd5b50829004905061223d565b8084116121d657600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b600080600061226a6122588a60020b611944565b6122648a60020b611944565b8961234a565b9050600061228f61227d8b60020b611944565b6122898b60020b611944565b8a6123b9565b905060006122b46122a28c60020b611944565b6122ae8c60020b611944565b8a61234a565b905060006122d96122c78d60020b611944565b6122d38d60020b611944565b8b6123b9565b9050831561230b57836122f5836001600160801b038b166129ae565b6122ff91906129c5565b6001600160801b031695505b821561233b5782612325826001600160801b038a166129ae565b61232f91906129c5565b6001600160801b031694505b50505050965096945050505050565b6000826001600160a01b0316846001600160a01b0316111561236a579192915b836001600160a01b03166123a3606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b0316612191565b816123b0576123b0612998565b04949350505050565b6000826001600160a01b0316846001600160a01b031611156123d9579192915b6123fc826001600160801b03168585036001600160a01b0316600160601b612191565b949350505050565b60405180610100016040528060006001600160801b03168152602001600060020b8152602001600060020b81526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6001600160a01b038116811461247657600080fd5b50565b8060020b811461247657600080fd5b6000806040838503121561249b57600080fd5b82356124a681612461565b915060208301356124b681612479565b809150509250929050565b6000602082840312156124d357600080fd5b813561223d81612461565b600060608201858352602085818501526040606081860152828651808552608087019150838801945060005b8181101561253b578551805160020b84528501516001600160801b031685840152948401949183019160010161250a565b50909998505050505050505050565b6000806040838503121561255d57600080fd5b823561256881612461565b946020939093013593505050565b60006020828403121561258857600080fd5b815161223d81612461565b805161259e81612461565b919050565b6000602082840312156125b557600080fd5b815161223d81612479565b634e487b7160e01b600052601160045260246000fd5b600281810b9083900b01627fffff8113627fffff1982121715610478576104786125c0565b60006020828403121561260d57600080fd5b5051919050565b80516001600160801b038116811461259e57600080fd5b60006020828403121561263d57600080fd5b61223d82612614565b8051801515811461259e57600080fd5b60006020828403121561266857600080fd5b61223d82612646565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff811182821017156126ab576126ab612671565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156126da576126da612671565b604052919050565b600060208083850312156126f557600080fd5b825167ffffffffffffffff8082111561270d57600080fd5b818501915085601f83011261272157600080fd5b81518181111561273357612733612671565b8060051b91506127448483016126b1565b818152918301840191848101908884111561275e57600080fd5b938501935b8385101561123d578451925061277883612479565b8282529385019390850190612763565b805161ffff8116811461259e57600080fd5b600080600080600080600060e0888a0312156127b557600080fd5b87516127c081612461565b60208901519097506127d181612479565b95506127df60408901612788565b94506127ed60608901612788565b93506127fb60808901612788565b925060a088015160ff8116811461281157600080fd5b915061281f60c08901612646565b905092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b80820180821115610478576104786125c0565b805167ffffffffffffffff8116811461259e57600080fd5b805162ffffff8116811461259e57600080fd5b60006101a0828403121561289457600080fd5b61289c612687565b6128a583612614565b81526128b360208401612614565b60208201526128c460408401612614565b604082015260608301516060820152608083015160808201526128e960a08401612614565b60a08201526128fa60c08401612614565b60c082015261290b60e08401612856565b60e082015261010061291e818501612614565b90820152610120612930848201612593565b90820152610140612942848201612593565b9082015261016061295484820161286e565b90820152610180612966848201612614565b908201529392505050565b6001600160801b03828116828216039080821115612991576129916125c0565b5092915050565b634e487b7160e01b600052601260045260246000fd5b8082028115828204841417610478576104786125c0565b6000826129e257634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122050be5687fd276ef81e940c857c26fdeff4bdfbef0b2cd861bd3591335565958264736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632494da9214610067578063365211961461009757806344086bd7146100aa5780637829596a146100d2578063b234c430146100f4578063c3c6ace314610115575b600080fd5b61007a610075366004612488565b610128565b6040516001600160801b0390911681526020015b60405180910390f35b61007a6100a5366004612488565b61047e565b6100bd6100b83660046124c1565b6106f2565b6040805192835260208301919091520161008e565b6100e56100e03660046124c1565b610b98565b60405161008e939291906124de565b6101076101023660046124c1565b610d57565b60405190815260200161008e565b6100bd61012336600461254a565b611249565b600080836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018d9190612576565b90506000846001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190612576565b6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610230573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102549190612576565b90506000856001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190612576565b90506000866001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032091906125a3565b905060006001600160a01b03851662fdd58e8961035687878c61034389826125d6565b6001600160a01b038d16939291906115db565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa15801561039f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c391906125fb565b9050806000036103db57600095505050505050610478565b846001600160a01b03166328daa1176103f383611632565b61040387878c61034389826125d6565b6040516001600160e01b031960e085901b1681526001600160801b0390921660048301526024820152604401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610470919061262b565b955050505050505b92915050565b600080836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e39190612576565b90506000846001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105499190612576565b6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa9190612576565b90506000856001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106109190612576565b90506000866001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906125a3565b90506106e26040518060c00160405280866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b031681526020018860020b815260200183896106c891906125d6565b60020b8152602001896001600160a01b03168152506116a3565b50919a9950505050505050505050565b6000806000836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107599190612576565b9050806001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190612656565b156107ce5750600093849350915050565b6000846001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108329190612576565b90506000856001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190612576565b90506000866001600160a01b031663346ac01f6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090291908101906126e2565b90506000876001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096891906125a3565b8251909150610975612404565b6000866001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d9919061279a565b505050505050905060005b83811015610b8a578581815181106109fe576109fe61282d565b60209081029190910181015160020b908401819052610a1e9086906125d6565b836040019060020b908160020b81525050610af76040518060c001604052808b6001600160a01b031681526020018a6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aae9190612576565b6001600160a01b03168152602001896001600160a01b03168152602001856020015160020b8152602001856040015160020b81526020018e6001600160a01b03168152506116a3565b60c088015260a0870152506001600160801b03168452506020830151610b3c908390610b259060020b611944565b610b35866040015160020b611944565b8651611c67565b60808501526060840181905260a0840151610b5691612843565b610b60908c612843565b9a508260c001518360800151610b769190612843565b610b80908b612843565b99506001016109e4565b505050505050505050915091565b6000806060610ba684611d03565b90506000846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190612576565b90506000856001600160a01b031663eba08b2a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190612576565b6040516370a0823160e01b81526001600160a01b038881166004830152919250908316906370a0823190602401602060405180830381865afa158015610cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce091906125fb565b6040516370a0823160e01b81526001600160a01b0388811660048301528316906370a0823190602401602060405180830381865afa158015610d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4a91906125fb565b9450945050509193909250565b6000806000610d65846106f2565b915091506000846001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcd9190612576565b90506000856001600160a01b031663eba08b2a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e339190612576565b6040516370a0823160e01b81526001600160a01b0388811660048301529192506000918291908416906370a0823190602401602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea691906125fb565b6040516370a0823160e01b81526001600160a01b038a811660048301528616906370a0823190602401602060405180830381865afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906125fb565b91509150876001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f769190612576565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd79190612576565b6001600160a01b0316846001600160a01b03160361100c57610ff98583612843565b91506110058682612843565b9050611025565b6110168683612843565b91506110228582612843565b90505b876001600160a01b031663c6bbd5a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190612576565b6001600160a01b031663b524aa2a6040518060a00160405280866001600160a01b03168152602001876001600160a01b031681526020018581526020018b6001600160a01b031663863776e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111269190612576565b6001600160a01b031681526020018b6001600160a01b0316634f3f6c926040518163ffffffff1660e01b8152600401602060405180830381865afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111969190612576565b6001600160a01b03908116909152604080516001600160e01b031960e086901b16815283518316600482015260208401518316602482015290830151604482015260608301518216606482015260809092015116608482015260a401602060405180830381865afa15801561120f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123391906125fb565b61123d9082612843565b98975050505050505050565b600080600080856001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190612576565b6001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113129190612576565b866001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190612576565b6001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190612576565b915091506000806113e5886106f2565b6040516370a0823160e01b81526001600160a01b038b811660048301529294509092506000918291908716906370a0823190602401602060405180830381865afa158015611437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145b91906125fb565b6040516370a0823160e01b81526001600160a01b038c811660048301528716906370a0823190602401602060405180830381865afa1580156114a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c591906125fb565b909250905061153f6114d78386612843565b8a8c6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153a91906125fb565b612191565b975061154e6114d78285612843565b9650896001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b29190612576565b6001600160a01b0316856001600160a01b0316036115ce579596955b5050505050509250929050565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152600291820b6080840152900b60a0808301919091528351808303909101815260c0909101909252815191012090565b60006001600160801b0382111561169f5760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b606482015260840160405180910390fd5b5090565b6000806000806000806116cd8760000151886020015189604001518a606001518b608001516115db565b875160a0890151604051627eeac760e11b81526001600160a01b0391821660048201526024810184905292935060009291169062fdd58e90604401602060405180830381865afa158015611725573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174991906125fb565b90508060000361176c57600080600080600096509650965096509650505061193b565b8751604051636ac3bc6b60e11b8152600481018490526000916001600160a01b03169063d58778d6906024016101a060405180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da9190612881565b89516040516328daa11760e01b81526001600160801b0385166004820152602481018690529192506001600160a01b0316906328daa11790604401602060405180830381865afa158015611832573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611856919061262b565b9750600081604001516001600160801b031682600001516001600160801b031610611891576040820151825161188c9190612971565b611894565b60005b905081600001516001600160801b0316896001600160801b03161180156118c457506000816001600160801b0316115b156118d7576118d4600182612971565b90505b806001600160801b0316896001600160801b0316116118f7576000611901565b611901818a612971565b965061190d878a612971565b97506119318a606001518b6080015184600001518b8660a001518760c00151612244565b9096509450505050505b91939590929450565b60008060008360020b1261195b578260020b611963565b8260020b6000035b9050620d89e8811115611989576040516315e4079d60e11b815260040160405180910390fd5b6000816001166000036119a057600160801b6119b2565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff16905060028216156119e6576ffff97272373d413259a46990580e213a0260801c5b6004821615611a05576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611a24576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611a43576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611a62576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611a81576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611aa0576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611ac0576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611ae0576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611b00576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611b20576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611b40576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611b60576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611b80576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611ba0576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611bc1576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611be1576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611c00576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611c1d576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611c3e578060001981611c3a57611c3a612998565b0490505b640100000000810615611c52576001611c55565b60005b60ff16602082901c0192505050919050565b600080836001600160a01b0316856001600160a01b03161115611c88579293925b846001600160a01b0316866001600160a01b031611611cb357611cac85858561234a565b9150611cfa565b836001600160a01b0316866001600160a01b03161015611cec57611cd886858561234a565b9150611ce58587856123b9565b9050611cfa565b611cf78585856123b9565b90505b94509492505050565b60606000826001600160a01b031663903c8dd36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d699190612576565b6001600160a01b03166316f0115b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dca9190612576565b90506000836001600160a01b031663c80916d46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e309190612576565b90506000846001600160a01b031663c05e21566040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e969190612576565b90506000856001600160a01b0316637164cf9b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efc91906125a3565b90506000866001600160a01b031663346ac01f6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611f3e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f6691908101906126e2565b80519091506000611f75612404565b8267ffffffffffffffff811115611f8e57611f8e612671565b604051908082528060200260200182016040528015611fd357816020015b6040805180820190915260008082526020820152815260200190600190039081611fac5790505b50985060005b8381101561218357848181518110611ff357611ff361282d565b60209081029190910181015160020b9083018190526120139087906125d6565b60020b60408301819052602083015161203b916001600160a01b038b16918c918b91906115db565b604051627eeac760e11b81526001600160a01b038d8116600483015260248201839052919450908916906328daa117906120bf90839062fdd58e90604401602060405180830381865afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba91906125fb565b611632565b6040516001600160e01b031960e084901b1681526001600160801b03909116600482015260248101869052604401602060405180830381865afa15801561210a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212e919061262b565b6001600160801b0390811683526040805180820190915260208085015160020b82528451909216918101919091528a518b90839081106121705761217061282d565b6020908102919091010152600101611fd9565b505050505050505050919050565b60008080600019858709858702925082811083820303915050806000036121ca57600084116121bf57600080fd5b50829004905061223d565b8084116121d657600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b600080600061226a6122588a60020b611944565b6122648a60020b611944565b8961234a565b9050600061228f61227d8b60020b611944565b6122898b60020b611944565b8a6123b9565b905060006122b46122a28c60020b611944565b6122ae8c60020b611944565b8a61234a565b905060006122d96122c78d60020b611944565b6122d38d60020b611944565b8b6123b9565b9050831561230b57836122f5836001600160801b038b166129ae565b6122ff91906129c5565b6001600160801b031695505b821561233b5782612325826001600160801b038a166129ae565b61232f91906129c5565b6001600160801b031694505b50505050965096945050505050565b6000826001600160a01b0316846001600160a01b0316111561236a579192915b836001600160a01b03166123a3606060ff16846001600160801b0316901b8686036001600160a01b0316866001600160a01b0316612191565b816123b0576123b0612998565b04949350505050565b6000826001600160a01b0316846001600160a01b031611156123d9579192915b6123fc826001600160801b03168585036001600160a01b0316600160601b612191565b949350505050565b60405180610100016040528060006001600160801b03168152602001600060020b8152602001600060020b81526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b6001600160a01b038116811461247657600080fd5b50565b8060020b811461247657600080fd5b6000806040838503121561249b57600080fd5b82356124a681612461565b915060208301356124b681612479565b809150509250929050565b6000602082840312156124d357600080fd5b813561223d81612461565b600060608201858352602085818501526040606081860152828651808552608087019150838801945060005b8181101561253b578551805160020b84528501516001600160801b031685840152948401949183019160010161250a565b50909998505050505050505050565b6000806040838503121561255d57600080fd5b823561256881612461565b946020939093013593505050565b60006020828403121561258857600080fd5b815161223d81612461565b805161259e81612461565b919050565b6000602082840312156125b557600080fd5b815161223d81612479565b634e487b7160e01b600052601160045260246000fd5b600281810b9083900b01627fffff8113627fffff1982121715610478576104786125c0565b60006020828403121561260d57600080fd5b5051919050565b80516001600160801b038116811461259e57600080fd5b60006020828403121561263d57600080fd5b61223d82612614565b8051801515811461259e57600080fd5b60006020828403121561266857600080fd5b61223d82612646565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff811182821017156126ab576126ab612671565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156126da576126da612671565b604052919050565b600060208083850312156126f557600080fd5b825167ffffffffffffffff8082111561270d57600080fd5b818501915085601f83011261272157600080fd5b81518181111561273357612733612671565b8060051b91506127448483016126b1565b818152918301840191848101908884111561275e57600080fd5b938501935b8385101561123d578451925061277883612479565b8282529385019390850190612763565b805161ffff8116811461259e57600080fd5b600080600080600080600060e0888a0312156127b557600080fd5b87516127c081612461565b60208901519097506127d181612479565b95506127df60408901612788565b94506127ed60608901612788565b93506127fb60808901612788565b925060a088015160ff8116811461281157600080fd5b915061281f60c08901612646565b905092959891949750929550565b634e487b7160e01b600052603260045260246000fd5b80820180821115610478576104786125c0565b805167ffffffffffffffff8116811461259e57600080fd5b805162ffffff8116811461259e57600080fd5b60006101a0828403121561289457600080fd5b61289c612687565b6128a583612614565b81526128b360208401612614565b60208201526128c460408401612614565b604082015260608301516060820152608083015160808201526128e960a08401612614565b60a08201526128fa60c08401612614565b60c082015261290b60e08401612856565b60e082015261010061291e818501612614565b90820152610120612930848201612593565b90820152610140612942848201612593565b9082015261016061295484820161286e565b90820152610180612966848201612614565b908201529392505050565b6001600160801b03828116828216039080821115612991576129916125c0565b5092915050565b634e487b7160e01b600052601260045260246000fd5b8082028115828204841417610478576104786125c0565b6000826129e257634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122050be5687fd276ef81e940c857c26fdeff4bdfbef0b2cd861bd3591335565958264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "freeAssets(address)": {
        "details": "Calculates the total free assets in Dopex pools and returns the sum. Free assets are the assets that can be redeemed from the pools. This function iterates through the active ticks in the pool and calculates the liquidity that can be redeemed for each tick. It then converts the liquidity to token amounts using the current sqrt ratio and tick values. The sum of token amounts is calculated and merged with the total assets in the automator. Finally, the quote value is obtained using the current tick and the base value, and returned as the result.",
        "returns": {
          "_0": "The total free assets in Dopex pools."
        }
      },
      "freePoolPositionInToken01(address)": {
        "details": "Retrieves the total free liquidity in token0 and token1 in the pool.",
        "params": {
          "automator": "The automator contract."
        },
        "returns": {
          "sumAmount0": "The total free liquidity in token0.",
          "sumAmount1": "The total free liquidity in token1."
        }
      },
      "getAutomatorPositions(address)": {
        "details": "Retrieves the positions of the automator.",
        "returns": {
          "balanceCounterAsset": "The balance of the counter asset.",
          "balanceDepositAsset": "The balance of the deposit asset.",
          "rebalanceTicks": "An array of structs representing the active ticks and its liquidity."
        }
      },
      "getTickAllLiquidity(address,int24)": {
        "details": "Retrieves the total liquidity of a given tick range.",
        "params": {
          "tick": "The tick value representing the range."
        },
        "returns": {
          "_0": "The total liquidity of the tick range."
        }
      },
      "getTickFreeLiquidity(address,int24)": {
        "details": "Retrieves the amount of free liquidity for a given tick.",
        "params": {
          "tick": "The tick value for which to retrieve the free liquidity."
        },
        "returns": {
          "freeLiquidity": "The amount of free liquidity for the specified tick."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
