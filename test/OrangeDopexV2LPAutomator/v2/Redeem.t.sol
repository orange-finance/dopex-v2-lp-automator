// SPDX-License-Identifier: GPL-3.0
// solhint-disable func-name-mixedcase
// solhint-disable one-contract-per-file

pragma solidity 0.8.19;

import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";
import {IUniswapV3Pool} from "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol";
import {UniswapV3Helper} from "../../helper/UniswapV3Helper.t.sol";
import {WETH_USDC_Fixture} from "./fixture/WETH_USDC_Fixture.t.sol";
import {DealExtension} from "../../helper/DealExtension.t.sol";

contract TestOrangeStrykeLPAutomatorV2Redeem is WETH_USDC_Fixture, DealExtension {
    using UniswapV3Helper for IUniswapV3Pool;

    bytes public constant SWAP_CALLDATA_STATIC_NO_POSITIONS =
        hex"e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000033d08010000002902000000c6962004f452be9203591991d15f6b388e09e8d00000000000000000000000111dbf1c69010a020000003c000000e78876c360716f2225f55a6726b32324fe1b1145ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000223b7e38b02180000001a02000000c31e54c7a869b9fcbecc14363cf510d1c41fa44301010a020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d200000000000000000000000223b7e38b010a0000001a02000000e754841b77c874135caca3386676e886459c2d6101010a020000005c02000000a17afcab059f3c6751f5b64347b5a503c3291868fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb90000000000000000000000088edf8e2c0000000000000000000000000000000000000000000000000000000000000000150000001a02000000641c00a822e8b671738d32a431a4fb6074e5c79d01010a01000000290200000030afbcf9458c3131a6d051c621e307e6278e4110000000000000000000000004476fc716010a020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d2000000000000000000000004476fc716010a0000001a02000000c31e54c7a869b9fcbecc14363cf510d1c41fa44301010a020000002902000000df63268af25a2a69c07d09a88336cd9424269a1f00000000000000000000000223b7e38b010a0000001a02000000641c00a822e8b671738d32a431a4fb6074e5c79d01010a03000000290200000023a0f6c10300adbf43c9f12ef197b063a65a85a400000000000000000000000223b7e38b010a0000002f02000000e4b2dfc82977dd2dce7e8d37895a6a8f50cbb4fb01a5f36e822540efd11fcd77ec46626b916b217c3e00000c0000001a02000000641c00a822e8b671738d32a431a4fb6074e5c79d01010aaf88d065e77c8cc2239327c5edb3a432268e583182af49447d8a07e3bd95bd0d56f35241523fbab17bb886e6fce69554e427e4dcc5cd8eaf5a3c9dd000000000000000000000000065f42c71000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000002d63bad00df80000000000000002b4970149292a50d0000000000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000007bb886e6fce69554e427e4dcc5cd8eaf5a3c9dd00000000000000000000000000000000000000000000000000000002aca5dc6ed000000000000000000000000000000000000000000000002b3e5b3b76c73becf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e85400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000002aca5dc6ed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f07b22536f75726365223a22222c22416d6f756e74496e555344223a223138333431362e3338363038313039353834222c22416d6f756e744f7574555344223a223138333630322e31373533353734383532222c22526566657272616c223a22222c22466c616773223a312c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2256457073583966774d774459584f37384e44374e7472664e4558424833684c7936555233557632575a4c677049326a7a38764b76775a544f364b594155456247492f5a46396c596842456f4d5572324b6539514b3352794775786142385952692b5763416d73746f377a2f4f39554e584a684e742f623756644b61614c51324e746b46795742773476636f49577252505838787055444b2f744e632b756554496f79744a7330524a5571713935795336396f372f4c772f536c664c417a4d4e616b6944364d6c6b6d78546674494d64324a4e704f5968332b6d5a46397a623965424c43434d6238375335596b504e522f336d31444e7a61656f556e42714468734576462b5279334a43746a6f333973415a6d4c79733872616b43304f3770386d3136785962614c626e6a6558304e54554334323749797a57336657306b78632b3578446730696f4f4c3036324651785a546f566454413d3d227d7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes public constant SWAP_CALLDATA_STATIC_HAS_POSITIONS =
        hex"e21fd0e9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e854000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000028e06020000005c02000000a17afcab059f3c6751f5b64347b5a503c3291868fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000006fc23ac000000000000000000000000000000000000000000000000000000000000000000150000001a02000000641c00a822e8b671738d32a431a4fb6074e5c79d01010a010000002902000000c6962004f452be9203591991d15f6b388e09e8d0000000000000000000000009502f9000010a020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d20000000000000000000000012a05f200010a0000001a02000000e754841b77c874135caca3386676e886459c2d6101010a030000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d20000000000000000000000012a05f200010a0000002f02000000e4b2dfc82977dd2dce7e8d37895a6a8f50cbb4fb01a5f36e822540efd11fcd77ec46626b916b217c3e00000c0000001a02000000641c00a822e8b671738d32a431a4fb6074e5c79d01010a020000002902000000562d29b54d2c57f8620c920415c4dceadd6de2d20000000000000000000000037e11d600010a0000001a02000000c31e54c7a869b9fcbecc14363cf510d1c41fa44301010a01000000290200000030afbcf9458c3131a6d051c621e307e6278e41100000000000000000000000012a05f200010aaf88d065e77c8cc2239327c5edb3a432268e583182af49447d8a07e3bd95bd0d56f35241523fbab17bb886e6fce69554e427e4dcc5cd8eaf5a3c9dd000000000000000000000000065f42f9e0000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000018ca235a2b3d00000000000000017a4261ee9e4ee7f2000000000000000000000000000000000000000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000007bb886e6fce69554e427e4dcc5cd8eaf5a3c9dd0000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000179e18c548615fec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ddd59c33c73c44733b4123a86ea5ce57f6e8540000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e57b22536f75726365223a22222c22416d6f756e74496e555344223a22313030303030222c22416d6f756e744f7574555344223a223130303031392e3137363336373931303734222c22526566657272616c223a22222c22466c616773223a312c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22634157727a5a706e67743971475052694777656d6b3435515a456d4b6d5450553173456a6d527a7432526b32664b497947794272314e6b566a6643567552746e59477a7a4a7972644e335541532b4632624d373145753759694f565062426e51363546705147685947586662696a46786c41586a4f542b592f4f4176544c6f3859596531742b6a4436457672307945685a4555384f2b494d4a79595732624a6e4c4a6d615554614f6d534d4e30362b73775470746a686b67305670716e6457646e6d5a4f74466a4162344464616756716643454f574f4367375555504957684831366f4a4d6d6341316a656b77634e5648325246784845354e4c2f4a73355569324266736f6b6f72414355495363634b464a457970587669423446725330784c357674496761434351484979365367453344534e4255536e744a636f596a746f555866713543766230536a355133344e356d774466413d3d227d7d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    uint256 public arbFork;

    function setUp() public override {
        arbFork = vm.createSelectFork("arb");
        super.setUp();
    }

    // for getting quick feedback
    function test_redeemWithAggregator_static() public {
        // pin the fork
        vm.rollFork(arbFork, 190602760);
        super.setUp();

        uint256 shares = automator.deposit(50 ether, alice);
        uint256 usdc = automator.automator().pool().getQuote(address(WETH), address(USDC), 50 ether);
        dealUsdc(address(automator.automator()), usdc);

        emit log_named_uint("usdc", usdc);

        emit log_named_uint("vault weth balance before: ", WETH.balanceOf(address(automator.automator())));
        emit log_named_uint("vault usdc balance before: ", USDC.balanceOf(address(automator.automator())));
        emit log_named_uint("alice weth before: ", WETH.balanceOf(alice));

        bytes memory redeemData = abi.encode(kyberswapProxy, kyberswapRouter, SWAP_CALLDATA_STATIC_NO_POSITIONS);

        automator.redeem(shares, redeemData, alice);

        emit log_named_uint("vault weth balance after: ", WETH.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("vault usdc balance after: ", USDC.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("alice weth after: ", WETH.balanceOf(alice));

        uint256 expectedWeth = 50 ether +
            automator.automator().pool().getQuote(address(USDC), address(WETH), uint128(usdc));

        assertApproxEqRel(expectedWeth, WETH.balanceOf(alice), 0.001e18);
    }

    // for getting quick feedback
    function test_redeemWithAggregator_hasPositions_static() public {
        // pin the fork
        vm.rollFork(190605809);
        super.setUp();

        uint256 shares = automator.deposit(50 ether, alice);
        dealUsdc(address(automator.automator()), 100_000e6);

        automator.rebalanceSingleLeft(pool.currentLower() - 10, 30_000e6);
        automator.rebalanceSingleLeft(pool.currentLower() - 20, 30_000e6);

        // swap all free usdc when redeeming
        (, uint256 free1) = inspector.freePoolPositionInToken01(automator.automator());
        uint256 freeUsdc = USDC.balanceOf(address(automator.automator())) + free1;

        emit log_named_uint("vault weth balance before: ", WETH.balanceOf(address(automator.automator())));
        emit log_named_uint("vault usdc balance before: ", USDC.balanceOf(address(automator.automator())));
        emit log_named_uint("alice weth before: ", WETH.balanceOf(alice));

        bytes memory redeemData = abi.encode(kyberswapProxy, kyberswapRouter, SWAP_CALLDATA_STATIC_HAS_POSITIONS);

        automator.redeem(shares, redeemData, alice);

        uint256 expectedWeth = 50 ether +
            automator.automator().pool().getQuote(address(USDC), address(WETH), uint128(freeUsdc));

        emit log_named_uint("vault weth balance after: ", WETH.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("vault usdc balance after: ", USDC.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("alice weth after: ", WETH.balanceOf(alice));

        assertApproxEqRel(expectedWeth, WETH.balanceOf(alice), 0.001e18);
    }

    // skipping this test on pre-commit
    function test_redeemWithAggregator_dynamic_Skip() public {
        uint256 shares = automator.deposit(50 ether, alice);
        uint256 usdc = automator.automator().pool().getQuote(address(WETH), address(USDC), 50 ether);
        dealUsdc(address(automator.automator()), usdc);

        // (address router, bytes memory swapCalldata) = _buildKyberswapData(address(automator.automator()), usdc);
        (address router, bytes memory swapCalldata) = _buildKyberswapData(address(automator.automator()), usdc);

        emit log_named_uint("vault weth balance before: ", WETH.balanceOf(address(automator.automator())));
        emit log_named_uint("vault usdc balance before: ", USDC.balanceOf(address(automator.automator())));
        emit log_named_uint("alice weth before: ", WETH.balanceOf(alice));

        bytes memory redeemData = abi.encode(kyberswapProxy, router, swapCalldata);

        automator.redeem(shares, redeemData, alice);

        emit log_named_uint("vault weth balance after: ", WETH.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("vault usdc balance after: ", USDC.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("alice weth after: ", WETH.balanceOf(alice));

        uint256 expectedWeth = 50 ether +
            automator.automator().pool().getQuote(address(USDC), address(WETH), uint128(usdc));

        assertApproxEqRel(expectedWeth, WETH.balanceOf(alice), 0.001e18);
    }

    function test_redeemWithAggregator_hasPositions_dynamic_Skip() public {
        uint256 shares = automator.deposit(50 ether, alice);
        // uint256 usdc = automator.automator().pool().getQuote(address(WETH), address(USDC), 50 ether);
        dealUsdc(address(automator.automator()), 100_000e6);

        automator.rebalanceSingleLeft(pool.currentLower() - 10, 30_000e6);
        automator.rebalanceSingleLeft(pool.currentLower() - 20, 30_000e6);

        // swap all free usdc when redeeming
        (, uint256 free1) = inspector.freePoolPositionInToken01(automator.automator());
        uint256 freeUsdc = USDC.balanceOf(address(automator.automator())) + free1;
        (address router, bytes memory swapCalldata) = _buildKyberswapData(address(automator.automator()), freeUsdc);

        emit log_named_uint("vault weth balance before: ", WETH.balanceOf(address(automator.automator())));
        emit log_named_uint("vault usdc balance before: ", USDC.balanceOf(address(automator.automator())));
        emit log_named_uint("alice weth before: ", WETH.balanceOf(alice));

        bytes memory redeemData = abi.encode(kyberswapProxy, router, swapCalldata);

        automator.redeem(shares, redeemData, alice);

        uint256 expectedWeth = 50 ether +
            automator.automator().pool().getQuote(address(USDC), address(WETH), uint128(freeUsdc));

        emit log_named_uint("vault weth balance after: ", WETH.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("vault usdc balance after: ", USDC.balanceOf(address(automator.automator()))); // prettier-ignore
        emit log_named_uint("alice weth after: ", WETH.balanceOf(alice));

        assertApproxEqRel(expectedWeth, WETH.balanceOf(alice), 0.001e18);
    }

    function _buildKyberswapData(
        address sender,
        uint256 amountUsdc
    ) internal returns (address router, bytes memory swapCalldata) {
        string[] memory buildSwapData = new string[](12);
        buildSwapData[0] = "node";
        buildSwapData[1] = "test/OrangeDopexV2LPAutomator/v2/kyberswap.mjs";
        buildSwapData[2] = "-i";
        buildSwapData[3] = "usdc";
        buildSwapData[4] = "-o";
        buildSwapData[5] = "weth";
        buildSwapData[6] = "-u";
        buildSwapData[7] = "wei";
        buildSwapData[8] = "-a";
        buildSwapData[9] = Strings.toString(amountUsdc);
        buildSwapData[10] = "-s";
        buildSwapData[11] = Strings.toHexString(uint256(uint160(sender)));

        emit log_named_string("buildSwapData.amountUsdc: ", Strings.toString(amountUsdc));

        bytes memory swapData = vm.ffi(buildSwapData);
        (router, swapCalldata) = abi.decode(swapData, (address, bytes));
    }
}
